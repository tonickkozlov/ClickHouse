#!/bin/bash

set -euxo pipefail

GIT_HASH=$(git rev-parse HEAD)
VERSION_DESCRIBE=$(git describe --tags --long --abbrev=12)

# Note 1: This VERSION_STRING format breaks some 3rd party tools [1],
#   however it gives us an easy way to see which build was broken in exception logs without
#   making changes to the code and without interfering with upstream versioning scheme.
#
#   [1]: https://jira.cfops.it/browse/CLICKHOUSE-600
#
# Note 2: We export this to prometheus [2] and use it on dashboards
#   to distinguish between different internal builds.
#
#   [2]: https://bitbucket.cfdata.org:443/projects/devops/repos/salt/browse/pillar/clickhouse/init.sls?at=0e50b5c71a77f4d4337d605da5a109554080962e#373
#
# Note 3: Don't try to update REVISION as it is used as "feature check" in native protocol.
VERSION_STRING=$(echo "$VERSION_DESCRIBE" | sed 's/^v//')

# Used in `/release` script for deb packages
export VERSION_STRING

# Condensed version of the test
#   https://bitbucket.cfdata.org:443/projects/devops/repos/salt/browse/states/_modules/clickhouse.py?at=0e50b5c71a77f4d4337d605da5a109554080962e#1231
if ! echo "$VERSION_STRING" | grep -P '^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(\.(?P<revision>0|[1-9]\d*))?(-(?P<release>[a-zA-Z-]*)-(?P<increment>0|[1-9]\d*)(-g(?P<commit>[0-9a-f]{5,40}\b))?)?$'
then
  echo "\$VERSION_STRING ($VERSION_STRING) has unexpected format"
  exit 1
fi

sed -i \
    -e "s/SET(VERSION_GITHASH [^) ]*/SET(VERSION_GITHASH $GIT_HASH/g;" \
    -e "s/SET(VERSION_DESCRIBE [^) ]*/SET(VERSION_DESCRIBE $VERSION_DESCRIBE/g;" \
    -e "s/SET(VERSION_STRING [^) ]*/SET(VERSION_STRING $VERSION_STRING/g;" \
    cmake/autogenerated_versions.txt

CMAKE_FLAGS=${CMAKE_FLAGS:-}

# Disable features we don't use in production.
# Reason: Faster builds and workaround for TeamCity memory limits.
export CMAKE_FLAGS="${CMAKE_FLAGS} -DENABLE_EMBEDDED_COMPILER=OFF -DENABLE_AMQPCPP=OFF -DENABLE_CASSANDRA=OFF -DENABLE_MSGPACK=OFF -DENABLE_AVRO=OFF -DENABLE_PROTOBUF=OFF -DENABLE_GRPC=OFF -DENABLE_ARROW=0 -DENABLE_ORC=0 -DENABLE_PARQUET=0 -DENABLE_HDFS=0 -DENABLE_MYSQL=0"

export CCACHE_DIR="/.ccache"
export CCACHE_BASEDIR="/cfsetup_build/clickhouse"
export CCACHE_NOHASHDIR=true
export CCACHE_COMPILERCHECK=content
export CCACHE_MAXSIZE=25G

CCACHE_ACCESS_KEY=${CCACHE_ACCESS_KEY:-}

build_start_time=$(date +%s)

if [[ -n "$CCACHE_ACCESS_KEY" ]]; then
  mkdir -p "$HOME/.ccache"

  export CCACHE_DIR="$HOME/.ccache"

  mkdir -p $HOME/.aws
  python3 ./cf-build/ccache_utils.py download
fi

upload_ccache() {
  ccache --show-stats

  if [[ -n "$CCACHE_ACCESS_KEY" ]]; then
    build_duration=$(date +%s)-$build_start_time

    # Upload updated cache only if we spent a considerable amount of time building it.
    # Otherwise we'll just spend 10 minutes uploading 10-15GB of cache without any
    # benefit for subsequent builds.
    #
    # 25 minutes as we don't have an opportunity to upload cache archive until deb packages is built,
    # an operation which takes ~10 minutes on our CI machines.
    if [[ $build_duration -gt 1500 ]]; then
      # Trim the cache before uploading.
      # https://ccache.dev/manual/4.2.html#_manual_cleanup
      export CCACHE_MAXSIZE=15G
      ccache --cleanup && ccache --show-stats
      python3 ./cf-build/ccache_utils.py upload
    fi
  fi
}

# Always try to upload ccache, even on failures
trap upload_ccache ERR EXIT

# Tune ccache config if directory is mounted.
if [ -d "$CCACHE_DIR" ]; then
  export CCACHE_BASEDIR=/cfsetup_build/clickhouse
  export PATH="/usr/lib/ccache:$PATH"

  ccache --zero-stats
  ccache --show-stats

  # cf-gcc doesn't work with ccache out of the box
  #   update these if you update the compiler
  sudo ln -s "$(command -v ccache)" /usr/lib/ccache/gcc-9 ||:
  sudo ln -s "$(command -v ccache)" /usr/lib/ccache/g++-9 ||:
else
  echo "ccache not enabled for this build"
  export CMAKE_FLAGS="${CMAKE_FLAGS} -DENABLE_CCACHE=OFF"
fi

./release --no-pbuilder
